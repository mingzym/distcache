#!/bin/sh

# This script handles grinding the GNU autotools. From a fresh CVS checkout, you
# need to run this - and it assumes your machine has autoconf, automake, and
# libtool installed. From then onwards, you probably don't need to run this as
# changes to the metafiles (Makefile.am, configure.in, etc) should be
# automatically handled by the generated Makefile anyway.

#set -x

if [ ! -d config ]; then
	mkdir config
fi

aclocal
autoheader

# Work around for a bug in libtoolize versions up to and including 1.4.2.
# libtoolize will look for 'AC_CONFIG_AUX_DIR' in configure.in, even though
# it's aware that configure.ac exists.
echo > 'configure.in' `grep '^AC_CONFIG_AUX_DIR' configure.ac`
libtoolize --copy --automake
# Remove the temporary file.
rm -f 'configure.in'

automake --foreign --add-missing --copy
autoconf

# Finally, get rid of the crud generated by autoheader (and automake if you put
# the 'rm' before it!) This is to make sure the generated tree is suitable for
# packaging - if the host system really has auto<whatever> and it wants to
# regenerate stuff, it can recreate the cache directory itself.
rm -rf autom4te*

if [ "x$PRECONF" = "x" ]; then
	echo ""
	echo "No PRECONF environment variable set, will not run ./configure"
	echo ""
	echo "To preconfigure, set PRECONF to one of the following;"
	echo "   gcc-RELEASE"
	echo "   gcc-DEBUG"
	echo ""
else
	if [ "$PRECONF" = "gcc-RELEASE" ]; then
		CFLAGS="-Wall -O3 -fomit-frame-pointer -DNDEBUG" \
		./configure || exit 1
	elif [ "$PRECONF" = "gcc-DEBUG" ]; then
		CFLAGS="-Wall -pedantic -Wundef -Wshadow -Wpointer-arith \
		-Wbad-function-cast -Wcast-qual -Wcast-align \
		-Wsign-compare -Wstrict-prototypes -Wmissing-prototypes \
		-Wmissing-declarations -Wredundant-decls \
		-Wunreachable-code -g -ggdb3" ./configure || exit 1
	else
		echo "Error, '$PRECONF' is not recognised as a value for PRECONF"
		exit 1
	fi
fi

